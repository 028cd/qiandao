// Generated by CoffeeScript 1.7.1
(function() {
  define(function(require, exports, module) {
    var analyze_cookies, checked, mime_type, sort, utils, xhr;
    utils = require('/static/utils');
    checked = function(har) {
      var c, entry, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4;
      _ref = har.log.entries;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entry = _ref[_i];
        entry.check_tag = [];
        if (entry.response.cookies.length > 0) {
          entry.check_tag.push('response-cookie');
          entry.checked = true;
        } else if (((function() {
          var _j, _len1, _ref1, _results;
          _ref1 = entry.request.cookies;
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            c = _ref1[_j];
            if (c.cookie_changed || c.cookie_added) {
              _results.push(c);
            }
          }
          return _results;
        })()).length > 0) {
          entry.check_tag.push('request-cookie-changed');
          entry.checked = true;
        } else if ((_ref1 = entry.response.status) === 0 || _ref1 === 304) {
          entry.checked = false;
        } else if (((_ref2 = entry.response.content) != null ? _ref2.mimeType.indexOf('image') : void 0) === 0) {
          entry.checked = false;
        } else if ((_ref3 = (_ref4 = entry.response.content) != null ? _ref4.mimeType : void 0) === 'text/css') {
          entry.checked = false;
        } else {
          entry.checked = true;
        }
      }
      return har;
    };
    xhr = function(har) {
      var entry, h, _i, _len, _ref;
      _ref = har.log.entries;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entry = _ref[_i];
        if (((function() {
          var _j, _len1, _ref1, _results;
          _ref1 = entry.request.headers;
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            h = _ref1[_j];
            if (h.name === 'X-Requested-With' && h.value === 'XMLHttpRequest') {
              _results.push(h);
            }
          }
          return _results;
        })()).length > 0) {
          entry.filter_xhr = true;
        }
      }
      return har;
    };
    mime_type = function(har) {
      var entry, mt, _i, _len, _ref, _ref1;
      _ref = har.log.entries;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entry = _ref[_i];
        mt = (_ref1 = entry.response.content) != null ? _ref1.mimeType : void 0;
        entry.filter_mimeType = (function() {
          switch (false) {
            case mt.indexOf('audio') !== 0:
              return 'media';
            case mt.indexOf('image') !== 0:
              return 'image';
            case mt.indexOf('javascript') === -1:
              return 'javascript';
            case mt !== 'text/html':
              return 'document';
            case mt !== 'text/css' && mt !== 'application/x-pointplus':
              return 'style';
            case mt.indexOf('application') !== 0:
              return 'media';
            default:
              return 'other';
          }
        })();
      }
      return har;
    };
    analyze_cookies = function(har) {
      var cookie, cookies, entry, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      cookies = {};
      _ref = har.log.entries;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entry = _ref[_i];
        _ref1 = entry.request.cookies;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          cookie = _ref1[_j];
          if (cookie.name in cookies) {
            if (cookie.value === cookies[cookie.name]) {
              cookie.from_session = true;
            } else {
              cookie.cookie_changed = true;
              entry.filter_cookie_changed = true;
            }
          } else {
            cookie.cookie_added = true;
            entry.filter_cookie_added = true;
          }
          cookies[cookie.name] = cookie.value;
        }
        _ref2 = entry.response.cookies;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          cookie = _ref2[_k];
          entry.filter_set_cookie = true;
          cookies[cookie.name] = cookie.value;
        }
      }
      return har;
    };
    sort = function(har) {
      har.log.entries = har.log.entries.sort(function(a, b) {
        if (a.pageref > b.pageref) {
          return 1;
        } else if (a.pageref < b.pageref) {
          return -1;
        } else if (a.startedDateTime > b.startedDateTime) {
          return 1;
        } else if (a.startedDateTime < b.startedDateTime) {
          return -1;
        } else {
          return 0;
        }
      });
      return har;
    };
    exports.analyze = function(har) {
      return mime_type(analyze_cookies(sort(har)));
    };
    return exports;
  });

}).call(this);
