// Generated by CoffeeScript 1.7.1
(function() {
  define(function(require, exports, module) {
    var analysis, editor, utils;
    require('jquery');
    require('bootstrap');
    require('angular');
    require('/static/har/contenteditable');
    analysis = require('/static/har/analysis');
    utils = require('/static/utils');
    $(document).on('click', '.contentedit-wrapper', function(ev) {
      var editable;
      return editable = $(this).hide().next('[contenteditable]').show().focus();
    });
    $(document).on('blur', '.contentedit-wrapper + [contenteditable]', function(ev) {
      return $(this).hide().prev('.contentedit-wrapper').show();
    });
    $(document).on('focus', '[contenteditable]', function(ev) {
      var range, sel;
      if (this.childNodes[0]) {
        range = document.createRange();
        sel = window.getSelection();
        range.setStartBefore(this.childNodes[0]);
        range.setEndAfter(this);
        sel.removeAllRanges();
        return sel.addRange(range);
      }
    });
    editor = angular.module('HAREditor', ['contenteditable']);
    editor.controller('UploadCtrl', function($scope, $rootScope) {
      var element;
      element = angular.element('#upload-har');
      element.modal('show').on('hide.bs.modal', function() {
        return $scope.uploaded != null;
      });
      element.find('input[type=file]').on('change', function(ev) {
        return $scope.file = this.files[0];
      });
      $scope.alert = function(message) {
        return element.find('.alert').text(message).show();
      };
      $scope.loaded = function(data) {
        console.log(data);
        $scope.uploaded = true;
        $rootScope.$emit('har-loaded', data);
        return angular.element('#upload-har').modal('hide');
      };
      return $scope.upload = function() {
        var reader;
        if ($scope.file == null) {
          return false;
        }
        if ($scope.file.size > 50 * 1024 * 1024) {
          $scope.alert('文件大小超过50M');
          return false;
        }
        element.find('button').button('loading');
        reader = new FileReader();
        reader.onload = function(ev) {
          var error;
          $scope.uploaded = true;
          try {
            return $scope.loaded({
              har: analysis.analyze(angular.fromJson(ev.target.result), {
                username: $scope.username,
                password: $scope.password
              })
            });
          } catch (_error) {
            error = _error;
            console.log(error);
            return $scope.alert('HAR 格式错误');
          } finally {
            element.find('button').button('reset');
          }
        };
        return reader.readAsText($scope.file);
      };
    });
    editor.controller('EditorCtrl', function($scope, $rootScope) {
      $rootScope.$on('har-loaded', function(ev, data) {
        return $scope.$apply(function() {
          var key, value, _results;
          console.log(data);
          _results = [];
          for (key in data) {
            value = data[key];
            _results.push($scope[key] = value);
          }
          return _results;
        });
      });
      $scope.status_label = function(status) {
        if (Math.floor(status / 100) === 2) {
          return 'label-success';
        } else if (Math.floor(status / 100) === 3) {
          return 'label-info';
        } else if (status === 0) {
          return 'label-danger';
        } else {
          return 'label-warning';
        }
      };
      $scope.variables_in_entry = analysis.variables_in_entry;
      $scope.filter = {};
      $scope.badge_filter = function(update) {
        var filter, key, value;
        filter = angular.copy($scope.filter);
        for (key in update) {
          value = update[key];
          filter[key] = value;
        }
        return filter;
      };
      $scope.track_item = function() {
        $scope.filted = [];
        return function(item) {
          $scope.filted.push(item);
          return true;
        };
      };
      $scope.edit = function(entry) {
        $scope.$broadcast('edit-entry', entry);
        return false;
      };
      return $scope.recommend = function() {
        return analysis.recommend($scope.har);
      };
    });
    editor.controller('EntryCtrl', function($scope, $rootScope, $sce) {
      $scope.$on('edit-entry', function(ev, entry) {
        console.log(entry);
        $scope.entry = entry;
        return angular.element('#edit-entry').modal('show');
      });
      $scope.$watch('entry.request.url', function() {
        var key, queryString, value;
        if ($scope.entry == null) {
          return;
        }
        queryString = (function() {
          var _ref, _results;
          _ref = utils.url_parse($scope.entry.request.url, true).query;
          _results = [];
          for (key in _ref) {
            value = _ref[key];
            _results.push({
              name: key,
              value: value
            });
          }
          return _results;
        })();
        if (!angular.equals(queryString, $scope.entry.request.queryString)) {
          return $scope.entry.request.queryString = queryString;
        }
      });
      $scope.$watch('entry.request.queryString', (function() {
        var each, query, url, _i, _len, _ref;
        if ($scope.entry == null) {
          return;
        }
        url = utils.url_parse($scope.entry.request.url);
        query = {};
        _ref = $scope.entry.request.queryString;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          each = _ref[_i];
          query[each.name] = each.value;
        }
        query = utils.querystring_unparse_with_variables(query);
        if (query) {
          url.search = "?" + query;
        }
        url = utils.url_unparse(url);
        if (url !== $scope.entry.request.url) {
          return $scope.entry.request.url = url;
        }
      }), true);
      $scope.$watch('entry.request.postData.params', (function() {
        var obj, param, _i, _len, _ref;
        if ($scope.entry == null) {
          return;
        }
        obj = {};
        _ref = $scope.entry.request.postData.params;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          param = _ref[_i];
          obj[param.name] = param.value;
        }
        return $scope.entry.request.postData.text = utils.querystring_unparse_with_variables(obj);
      }), true);
      $scope.panel = 'request';
      $scope["delete"] = function(hashKey, array) {
        var each, index, _i, _len;
        for (index = _i = 0, _len = array.length; _i < _len; index = ++_i) {
          each = array[index];
          if (each.$$hashKey === hashKey) {
            array.splice(index, 1);
            return;
          }
        }
      };
      return $scope.variables_wrapper = function(string, place_holder) {
        var re;
        if (place_holder == null) {
          place_holder = '';
        }
        string = string || place_holder;
        re = /{{\s*([\w]+?)\s*}}/g;
        return $sce.trustAsHtml(string.replace(re, '<span class="label label-primary">$&</span>'));
      };
    });
    return {
      init: function() {
        return angular.bootstrap(document.body, ['HAREditor']);
      },
      analysis: analysis
    };
  });

}).call(this);
